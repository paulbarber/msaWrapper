outcome_cor <- cor_data[order(abs(cor_data$correlation), decreasing = T),]
keep <- vector()
discard <- vector()
for(i in 1:length(outcome_cor$covars)){
var_name <- outcome_cor$covars[i]
g = group[var_name == names(data)]
cat(paste("Check:", i, var_name, group_names[g], "\n"))
# skip those already in discard list
if(var_name %in% discard){
cat(" Already discarded.\n")
next
}
# add to keep list
keep <- c(keep, var_name)
# get correlations with other variables
cors <- cormat[var_name,]
vstrong_vals <- cors[abs(cors) > threshold]
vstrong_cors <- names(cors)[abs(cors) > threshold]
# remove var_name and any NAs
vstrong_vals <- vstrong_vals[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_vals <- vstrong_vals[!is.na(vstrong_vals)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
# retain those in same group
vstrong_cors <- vstrong_cors[group[vstrong_cors]==g]
# add others to discard list
discard <- c(discard, vstrong_cors)
if(length(vstrong_cors>0))
cat(paste(" Discarding", vstrong_cors, signif(vstrong_vals, 3), "\n"))
}
# Form new dataset object as copy of the old
new_msa <- msa
# reduce the data in it
new_msa$data <- msa$data[, keep]
return(new_msa)
}
reduceByCorrelationWithinGroups(msa)
#' reduceByCorrelationWithinGroups
#'
#' Reduce the number of covars by removing those that are strongly correlated
#' within the groups, retaining the one best correlated with outcome.
#' @param msa The msaWrapper object to work with.
#' @param method Correlation method to use.
#' @return A new msaWrapper object with reduced data.
#' @export
reduceByCorrelationWithinGroups <- function(msa,
method = c("kendall", "pearson", "spearman"),
threshold = 0.6){
if(dim(msa$outcomeCorrelations)[1] < 1) stop("No outcomeCorrelations in msaWrapper object.
Perform generateOutcomeCorrelations().")
method <- match.arg(method)
cor_data <- msa$outcomeCorrelations
group <- msa$group
group_names <- msa$groupLabels
# order the table
outcome_cor <- cor_data[order(abs(cor_data$correlation), decreasing = T),]
keep <- vector()
discard <- vector()
for(i in 1:length(outcome_cor$covars)){
var_name <- outcome_cor$covars[i]
g = group[var_name == names(data)]
cat(paste("Check:", i, var_name, group_names[g], "\n"))
# skip those already in discard list
if(var_name %in% discard){
cat(" Already discarded.\n")
next
}
# add to keep list
keep <- c(keep, var_name)
# get correlations with other variables
cors <- cormat[var_name,]
vstrong_vals <- cors[abs(cors) > threshold]
vstrong_cors <- names(cors)[abs(cors) > threshold]
# remove var_name and any NAs
vstrong_vals <- vstrong_vals[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_vals <- vstrong_vals[!is.na(vstrong_vals)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
# retain those in same group
vstrong_cors <- vstrong_cors[group[vstrong_cors]==g]
# add others to discard list
discard <- c(discard, vstrong_cors)
if(length(vstrong_cors>0))
cat(paste(" Discarding", vstrong_cors, signif(vstrong_vals, 3), "\n"))
}
# Form new dataset object as copy of the old
new_msa <- msa
# reduce the data in it
new_msa$data <- msa$data[, keep]
return(new_msa)
}
reduceByCorrelationWithinGroups(msa)
#' reduceByCorrelationWithinGroups
#'
#' Reduce the number of covars by removing those that are strongly correlated
#' within the groups, retaining the one best correlated with outcome.
#' @param msa The msaWrapper object to work with.
#' @param method Correlation method to use.
#' @return A new msaWrapper object with reduced data.
#' @export
reduceByCorrelationWithinGroups <- function(msa,
method = c("kendall", "pearson", "spearman"),
threshold = 0.6){
if(dim(msa$outcomeCorrelations)[1] < 1) stop("No outcomeCorrelations in msaWrapper object. Perform generateOutcomeCorrelations().")
method <- match.arg(method)
cor_data <- msa$outcomeCorrelations
group <- msa$group
group_names <- msa$groupLabels
# order the table
outcome_cor <- cor_data[order(abs(cor_data$correlation), decreasing = T),]
keep <- vector()
discard <- vector()
for(i in 1:length(outcome_cor$covars)){
var_name <- outcome_cor$covars[i]
g = group[var_name == names(data)]
cat(paste("Check:", i, var_name, group_names[g], "\n"))
# skip those already in discard list
if(var_name %in% discard){
cat(" Already discarded.\n")
next
}
# add to keep list
keep <- c(keep, var_name)
# get correlations with other variables
cors <- cormat[var_name,]
vstrong_vals <- cors[abs(cors) > threshold]
vstrong_cors <- names(cors)[abs(cors) > threshold]
# remove var_name and any NAs
vstrong_vals <- vstrong_vals[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_vals <- vstrong_vals[!is.na(vstrong_vals)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
# retain those in same group
vstrong_cors <- vstrong_cors[group[vstrong_cors]==g]
# add others to discard list
discard <- c(discard, vstrong_cors)
if(length(vstrong_cors>0))
cat(paste(" Discarding", vstrong_cors, signif(vstrong_vals, 3), "\n"))
}
# Form new dataset object as copy of the old
new_msa <- msa
# reduce the data in it
new_msa$data <- msa$data[, keep]
return(new_msa)
}
reduceByCorrelationWithinGroups(msa)
generateOutcomeCorrelations(msa)
m <- generateOutcomeCorrelations(msa)
reduceByCorrelationWithinGroups(m)
View(m)
#' reduceByCorrelationWithinGroups
#'
#' Reduce the number of covars by removing those that are strongly correlated
#' within the groups, retaining the one best correlated with outcome.
#' @param msa The msaWrapper object to work with.
#' @param method Correlation method to use.
#' @return A new msaWrapper object with reduced data.
#' @export
reduceByCorrelationWithinGroups <- function(msa,
method = c("kendall", "pearson", "spearman"),
threshold = 0.6){
method <- match.arg(method)
msa <- generateOutcomeCorrelations(msa, method)
cor_data <- msa$outcomeCorrelations
group <- msa$group
group_names <- msa$groupLabels
# get data correlations
cormat <- cor(msa$data[, -c(1)], method = method, use = "pairwise.complete.obs")
# order the table
outcome_cor <- cor_data[order(abs(cor_data$correlation), decreasing = T),]
keep <- vector()
discard <- vector()
for(i in 1:length(outcome_cor$covars)){
var_name <- outcome_cor$covars[i]
g = group[var_name == names(data)]
cat(paste("Check:", i, var_name, group_names[g], "\n"))
# skip those already in discard list
if(var_name %in% discard){
cat(" Already discarded.\n")
next
}
# add to keep list
keep <- c(keep, var_name)
# get correlations with other variables
cors <- cormat[var_name,]
vstrong_vals <- cors[abs(cors) > threshold]
vstrong_cors <- names(cors)[abs(cors) > threshold]
# remove var_name and any NAs
vstrong_vals <- vstrong_vals[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_vals <- vstrong_vals[!is.na(vstrong_vals)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
# retain those in same group
vstrong_cors <- vstrong_cors[group[vstrong_cors]==g]
# add others to discard list
discard <- c(discard, vstrong_cors)
if(length(vstrong_cors>0))
cat(paste(" Discarding", vstrong_cors, signif(vstrong_vals, 3), "\n"))
}
# reduce the data
new_data <- msa$data[, keep]
new_group <- msa$group[keep]
new_groupLabels <- msa$groupLabels
new_msa <- msaWrapperCreate(new_data, msa$outcome,
group = new_group, groupLabels = new_groupLabels)
return(new_msa)
}
r <- reduceByCorrelationWithinGroups(m)
debugonce(reduceByCorrelationWithinGroups)
r <- reduceByCorrelationWithinGroups(m)
#' reduceByCorrelationWithinGroups
#'
#' Reduce the number of covars by removing those that are strongly correlated
#' within the groups, retaining the one best correlated with outcome.
#' @param msa The msaWrapper object to work with.
#' @param method Correlation method to use.
#' @return A new msaWrapper object with reduced data.
#' @export
reduceByCorrelationWithinGroups <- function(msa,
method = c("kendall", "pearson", "spearman"),
threshold = 0.6){
method <- match.arg(method)
msa <- generateOutcomeCorrelations(msa, method)
cor_data <- msa$outcomeCorrelations
group <- msa$group
group_names <- msa$groupLabels
# get data correlations
cormat <- cor(msa$data, method = method, use = "pairwise.complete.obs")
# order the table
outcome_cor <- cor_data[order(abs(cor_data$correlation), decreasing = T),]
keep <- vector()
discard <- vector()
for(i in 1:length(outcome_cor$covars)){
var_name <- outcome_cor$covars[i]
g = group[var_name == names(data)]
cat(paste("Check:", i, var_name, group_names[g], "\n"))
# skip those already in discard list
if(var_name %in% discard){
cat(" Already discarded.\n")
next
}
# add to keep list
keep <- c(keep, var_name)
# get correlations with other variables
cors <- cormat[var_name,]
vstrong_vals <- cors[abs(cors) > threshold]
vstrong_cors <- names(cors)[abs(cors) > threshold]
# remove var_name and any NAs
vstrong_vals <- vstrong_vals[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_vals <- vstrong_vals[!is.na(vstrong_vals)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
# retain those in same group
vstrong_cors <- vstrong_cors[group[vstrong_cors]==g]
# add others to discard list
discard <- c(discard, vstrong_cors)
if(length(vstrong_cors>0))
cat(paste(" Discarding", vstrong_cors, signif(vstrong_vals, 3), "\n"))
}
# reduce the data
new_data <- msa$data[, keep]
new_group <- msa$group[keep]
new_groupLabels <- msa$groupLabels
new_msa <- msaWrapperCreate(new_data, msa$outcome,
group = new_group, groupLabels = new_groupLabels)
return(new_msa)
}
r <- reduceByCorrelationWithinGroups(m)
print(r)
r <- reduceByCorrelationWithinGroups(m, threshold = 0.1)
debugonce(reduceByCorrelationWithinGroups)
r <- reduceByCorrelationWithinGroups(m, threshold = 0.1)
names(data
)
names(msa$data)
#' reduceByCorrelationWithinGroups
#'
#' Reduce the number of covars by removing those that are strongly correlated
#' within the groups, retaining the one best correlated with outcome.
#' @param msa The msaWrapper object to work with.
#' @param method Correlation method to use.
#' @return A new msaWrapper object with reduced data.
#' @export
reduceByCorrelationWithinGroups <- function(msa,
method = c("kendall", "pearson", "spearman"),
threshold = 0.6){
method <- match.arg(method)
msa <- generateOutcomeCorrelations(msa, method)
cor_data <- msa$outcomeCorrelations
group <- msa$group
group_names <- msa$groupLabels
# get data correlations
cormat <- cor(msa$data, method = method, use = "pairwise.complete.obs")
# order the table
outcome_cor <- cor_data[order(abs(cor_data$correlation), decreasing = T),]
keep <- vector()
discard <- vector()
for(i in 1:length(outcome_cor$covars)){
var_name <- outcome_cor$covars[i]
g = group[var_name == names(msa$data)]
cat(paste("Check:", i, var_name, group_names[g], "\n"))
# skip those already in discard list
if(var_name %in% discard){
cat(" Already discarded.\n")
next
}
# add to keep list
keep <- c(keep, var_name)
# get correlations with other variables
cors <- cormat[var_name,]
vstrong_vals <- cors[abs(cors) > threshold]
vstrong_cors <- names(cors)[abs(cors) > threshold]
# remove var_name and any NAs
vstrong_vals <- vstrong_vals[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_vals <- vstrong_vals[!is.na(vstrong_vals)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
# retain those in same group
vstrong_cors <- vstrong_cors[group[vstrong_cors]==g]
# add others to discard list
discard <- c(discard, vstrong_cors)
if(length(vstrong_cors>0))
cat(paste(" Discarding", vstrong_cors, signif(vstrong_vals, 3), "\n"))
}
# reduce the data
new_data <- msa$data[, keep]
new_group <- msa$group[keep]
new_groupLabels <- msa$groupLabels
new_msa <- msaWrapperCreate(new_data, msa$outcome,
group = new_group, groupLabels = new_groupLabels)
return(new_msa)
}
r <- reduceByCorrelationWithinGroups(m, threshold = 0.1)
dim(r$data)
r <- reduceByCorrelationWithinGroups(m, threshold = 0.6)
debugonce(reduceByCorrelationWithinGroups)
r <- reduceByCorrelationWithinGroups(m, threshold = 0.6)
vstrong_cors <- names(cors)[abs(cors) > threshold]
vstrong_cors <- vstrong_cors[!(vstrong_cors == var_name)]
vstrong_cors <- vstrong_cors[!is.na(vstrong_cors)]
group[vstrong_cors]
group
names(group)
names(msa$data)
library(msaWrapper)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(msaWrapper)
data("tte_data")
names(tte_data)
groups <- c(1, rep(2,2), rep(3,6), 1, rep(2,3), rep(4,26), 5, 6, 6, rep(7, 3),
rep(4,26), 6, 6, 5, rep(7, 3))
groupNames <- c("Drug", "Clinical", "Site", "immune", "FRET", "miR", "missing")
length(groups)
msa <- msaWrapperCreate(tte_data[,1:77], tte_data[,78:79],
group = groups, groupLabels = groupNames)
summary(msa)
r <- reduceByCorrelationWithinGroups(msa, threshold = 0.6)
dim(r$data)
library(msaWrapper)
print(msa)
print.msaWrapperTte <- function(msa, ...){
dim(msa$data)
}
print(msa)
summary(msa)
cat("data: ", dim(msa$data))
msa$type
table(msa$group)
help(table)
table(msa$group, row.names = msa$groupLabels)
table(msa$group, dnn = msa$groupLabels)
table(msa$group, responsName = msa$groupLabels)
t <- table(msa$group)
names(t)
names(t) <- groupNames
t
print.msaWrapperTte <- function(msa, ...){
msa$type
cat("data: ", dim(msa$data))
t<- table(msa$group)
names(t) <- msa$groupNames
t
}
print(msa)
print.msaWrapperTte <- function(msa, ...){
print(msa$type)
print("data: ", dim(msa$data))
t<- table(msa$group)
names(t) <- msa$groupNames
print(t)
}
print(msa)
print.msaWrapperTte <- function(msa, ...){
print(msa$type)
print(paste("data:", dim(msa$data)))
t<- table(msa$group)
names(t) <- msa$groupNames
print(t)
}
print(msa)
msa$groupLabels
print.msaWrapperTte <- function(msa, ...){
print(msa$type)
print(paste("data:", dim(msa$data)))
t<- table(msa$group)
names(t) <- msa$groupLabels
print(t)
}
print(msa)
library(msaWrapper)
print(msa)
library(msaWrapper)
print(msa)
t <- table(msa$outcome)
names(t) <- c("censored", "event")
print(t)
t <- table(msa$outcome$event)
names(t) <- c("censored", "event")
print(t)
library(msaWrapper)
print(msa)
rm(print.msaWrapperTte())
rm(print.msaWrapperTte
)
library(msaWrapper)
print(msa)
library(msaWrapper)
install.packages("usethis")
library(usethis)
use_r("buildRandomForest")
help("predict")
library(msaWrapper)
library(msaWrapper)
RSF <- buildRandomForest(msa)
library(msaWrapper)
RSF <- buildRandomForest(msa)
debugonce(buildRandomForest)
RSF <- buildRandomForest(msa)
names(msa$outcome)
debugonce(buildRandomForest)
RSF <- buildRandomForest(msa)
RSF <- buildRandomForest(msa)
debugonce(buildRandomForest)
RSF <- buildRandomForest(msa)
View(active_covar_names)
library(msaWrapper)
RSF <- buildRandomForest(msa)
RSF <- buildRandomForest(msa, iterations = 2)
help("close")
library(msaWrapper)
RSF <- buildRandomForest(msa, iterations = 2)
library(msaWrapper)
RSF <- buildRandomForest(msa, iterations = 2)
library(msaWrapper)
RSF <- buildRandomForest(msa, iterations = 2)
View(RSF)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(msaWrapper)
data("tte_data")
names(tte_data)
# Start at 2 after Drug column
groups <- c(rep(2,2), rep(3,6), 1, rep(2,3), rep(4,26), 5, 6, 6, rep(7, 3),
rep(4,26), 6, 6, 5, rep(7, 3))
groupNames <- c("Drug", "Clinical", "Site", "immune", "FRET", "miR", "missing")
length(groups)
msa <- msaWrapperCreate(tte_data[,2:77], tte_data[,1],
group = groups, groupLabels = groupNames)
summary(msa)
plotDataCorrelations(msa, method = "pearson", textSize = 3)
plotDataCorrelations(msa, method = "pearson", groups = c(4,5,6),
textSize = 4)
s <- strongDataCorrelations(msa, method = "pearson", threshold = 0.8)
print(s)
plotStrongCorrelations(msa, s[1:2,], method = "pearson", trans = "log10")
plotDataCrossCorrelations(msa,  method = "pearson", textSize = 5,
group1 = c(2,5,6), group2 = c(4))
plotOutcome(msa)
reduced_msa <- reduceByCorrelationWithinGroups(msa, threshold = 0.6)
View(msa)
debugonce(reduceByCorrelationWithinGroups)
reduced_msa <- reduceByCorrelationWithinGroups(msa, threshold = 0.6)
debugonce(generateOutcomeCorrelations)
msa <- generateOutcomeCorrelations(msa, method = "kendall")
msa$outcome
as.numeric(msa$outcome)
library(msaWrapper)
library(msaWrapper)
msa <- generateOutcomeCorrelations(msa, method = "kendall")
plotOutcomeCorrelations(msa, groups = c(2,4,5,6))
reduced_msa <- reduceByCorrelationWithinGroups(msa, threshold = 0.6)
summary(msa$outcome)
class(msa$outcome)
library(msaWrapper)
library(msaWrapper)
reduced_msa <- reduceByCorrelationWithinGroups(msa, threshold = 0.6)
print(reduced_msa)
# this will take some time
RSF <- buildRandomForest(reduced_msa, iterations = 10)
reduced_msa$outcome
View(reduced_msa)
View(reduced_msa[["data"]])
names(msa$outcome)
library(msaWrapper)
library(msaWrapper)
library(usethis)
use_r("buildSPSignature")
