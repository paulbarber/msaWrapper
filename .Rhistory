print(mergeddatawrapper_msa)
plotOutcome(mergeddatawrapper_msa)
plotDataCorrelations(mergeddatawrapper_msa, method = "kendall")
mergeddatawrapper_msa <- generateOutcomeCorrelations(mergeddatawrapper_msa)
plotOutcomeCorrelations(mergeddatawrapper_msa)
return (mergeddatawrapper_msa)
}
for (i in 1:4){
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
DL_RADx_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
#print(flow_test)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
DL_RADx_msa<-mergeAndCreatWrapper(feature_data=DL_RADx_train,outcomes)
#new_DL_RADx_msa<-reduceByCorrelationWithinGroups(DL_RADx_msa,method = "kendall", threshold=0.3)
saveRDS(DL_RADx_msa, file = paste0(data_namecv, "_msa.Rds"))
}
for (i in 1:4){
cat('Cross Validation :',i)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
msa_cv <- readRDS(paste0(data_namecv, "_msa.Rds"))
SPS_model_cv <- buildSPSignature(msa_cv, data_namecv, iterations = 5000)
saveRDS(SPS_model_cv, file = paste0(data_namecv, "_SPS_model.Rds"))
file.rename("SPS_Signature_logfile.txt", paste0(data_namecv, "_SPS_Signature_logfile.txt"))
}
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_name <-paste("Sel_DL_RADx",i,sep="_")
SPS_model_cv <- readRDS(paste0(data_name, "_SPS_model.Rds"))
plotSPSignatureBetaSwimmers(SPS_model_cv, show_best_performance_line = F)
plotSPSignatureOClass(SPS_model_cv)
}
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_name <-paste("Sel_DL_RADx",i,sep="_")
SPS_model_cv <- readRDS(paste0(data_name, "_SPS_model.Rds"))
plotSPSignatureBetaSwimmers(SPS_model_cv, show_best_performance_line = F)
plotSPSignatureOClass(SPS_model_cv)
}
traingAUC <- vector(mode="numeric", length=4)
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
#SPS_model_cv <- readRDS(paste0(data_namecv, "_SPS_model.Rds"))
DL_RADx_train <- flow[!(DL_RADx$ID %in% TestSetList[[i]]),]
MergedDataandLaebl <-GetMergeDataandLabel(DL_RADx_train,outcomes)
trainresultscv <-predictSPSignature(MergedDataandLaebl$mergedData, data_namecv, "Reg_SETCV_MAP_L2")
traingAUC[i]<-getSPSignaturePerformance(trainresultscv, MergedDataandLaebl$label)
getSignatures(data_namecv,"Reg_SETCV_MAP_L2")
getNormalisedSignatures(data_namecv,"Reg_SETCV_MAP_L2")
}
traingAUC <- vector(mode="numeric", length=4)
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
#SPS_model_cv <- readRDS(paste0(data_namecv, "_SPS_model.Rds"))
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
MergedDataandLaebl <-GetMergeDataandLabel(DL_RADx_train,outcomes)
trainresultscv <-predictSPSignature(MergedDataandLaebl$mergedData, data_namecv, "Reg_SETCV_MAP_L2")
traingAUC[i]<-getSPSignaturePerformance(trainresultscv, MergedDataandLaebl$label)
getSignatures(data_namecv,"Reg_SETCV_MAP_L2")
getNormalisedSignatures(data_namecv,"Reg_SETCV_MAP_L2")
}
print(mean(traingAUC))
print(sd((traingAUC)))
testAUC <- vector(mode="numeric", length=4)
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
#SPS_model_cv <- readRDS(paste0(data_namecv, "_SPS_model.Rds"))
flow_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
testresults <-predictSPSignature(flow_test, data_namecv, "Reg_SETCV_MAP_L2")
test_outcomes <- outcomes$CancerDx[outcomes$ID %in% TestSetList[[i]]]
testAUC[i]<-getSPSignaturePerformance(testresults,test_outcomes)
}
print(mean(testAUC))
print(sd((testAUC)))
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library(msaWrapper)
library(pROC)
library(glmnet)
library(readxl)
library(dplyr)
load('../../Deep learning radiomics/DL_RDx_data.Rdata')
DL_RADx <- DL_RADx %>% select(starts_with('VSSAE_nzmult_1'), 'ID')
texrad <- read.csv("../../from_Balaji radiomics/Mar2023/LungExosomes_DATA_2023-03-29_0958.csv")
texrad <- texrad[is.na(texrad$exclusions),] ##Remove exluded TexRad
texrad_IDs <- unique(texrad$subject_no)
dl_ID <- unique(DL_RADx$ID)
overlap <- intersect(texrad_IDs, dl_ID)
length(overlap)
DL_RADx <- DL_RADx[DL_RADx$ID %in% overlap,]
#DL_RADx <- DL_RADx[strex::str_first_number(DL_RADx$ID) > 53, ]
DL_RADx <- DL_RADx[strex::str_first_number(DL_RADx$ID) < 422, ]
length(DL_RADx$ID)
save(DL_RADx , file = "DL_Latent_data.Rdata")
load("../Testset_new1.rda")
load("../Testset_new2.rda")
load("../Testset_new3.rda")
load("../Testset_new4.rda")
TestSetList<-list(testSet1,testSet2,testSet3,testSet4)
outcomes <- read.csv("../../from_Thida and Sheena Lim/KCL_LungEDx_Outcomes Apr2023.csv")
GetMergeDataandLabel<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
return (list(mergedData=merged_data, label=CancerDx))
}
mergeAndCreatWrapper<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
# Create msa wrapper object to use for analysis
mergeddatawrapper_msa <- msaWrapperCreate(data = merged_data,
outcome = CancerDx,
rowsLabelled = T)
print(mergeddatawrapper_msa)
plotOutcome(mergeddatawrapper_msa)
plotDataCorrelations(mergeddatawrapper_msa, method = "kendall")
mergeddatawrapper_msa <- generateOutcomeCorrelations(mergeddatawrapper_msa)
plotOutcomeCorrelations(mergeddatawrapper_msa)
return (mergeddatawrapper_msa)
}
#msa<-mergeAndCreatWrapper(feature_data=DL_RADx,outcomes
#nemasa1<-reduceByCorrelationWithinGroups(msa,method = "kendall", threshold=0.4)
for (i in 1:4){
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
DL_RADx_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
#print(flow_test)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
DL_RADx_msa<-mergeAndCreatWrapper(feature_data=DL_RADx_train,outcomes)
new_DL_RADx_msa<-reduceByCorrelationWithinGroups(DL_RADx_msa,method = "kendall", threshold=0.7)
saveRDS(DL_RADx_msa, file = paste0(data_namecv, "_msa.Rds"))
}
mergeAndCreatWrapper<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Performance.Status,                                              Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
# Create msa wrapper object to use for analysis
mergeddatawrapper_msa <- msaWrapperCreate(data = merged_data,
outcome = CancerDx,
rowsLabelled = T)
print(mergeddatawrapper_msa)
plotOutcome(mergeddatawrapper_msa)
plotDataCorrelations(mergeddatawrapper_msa, method = "kendall")
mergeddatawrapper_msa <- generateOutcomeCorrelations(mergeddatawrapper_msa)
plotOutcomeCorrelations(mergeddatawrapper_msa)
return (mergeddatawrapper_msa)
}
for (i in 1:4){
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
DL_RADx_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
#print(flow_test)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
DL_RADx_msa<-mergeAndCreatWrapper(feature_data=DL_RADx_train,outcomes)
new_DL_RADx_msa<-reduceByCorrelationWithinGroups(DL_RADx_msa,method = "kendall", threshold=0.7)
saveRDS(DL_RADx_msa, file = paste0(data_namecv, "_msa.Rds"))
}
for (i in 1:4){
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
DL_RADx_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
#print(flow_test)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
DL_RADx_msa<-mergeAndCreatWrapper(feature_data=DL_RADx_train,outcomes)
new_DL_RADx_msa<-reduceByCorrelationWithinGroups(DL_RADx_msa,method = "kendall", threshold=0.5)
saveRDS(DL_RADx_msa, file = paste0(data_namecv, "_msa.Rds"))
}
View(DL_RADx_msa)
View(DL_RADx_msa)
View(new_DL_RADx_msa)
View(new_DL_RADx_msa)
for (i in 1:4){
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
DL_RADx_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
#print(flow_test)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
DL_RADx_msa<-mergeAndCreatWrapper(feature_data=DL_RADx_train,outcomes)
new_DL_RADx_msa<-reduceByCorrelationWithinGroups(DL_RADx_msa,method = "kendall", threshold=0.6)
saveRDS(DL_RADx_msa, file = paste0(data_namecv, "_msa.Rds"))
}
View(DL_RADx_msa)
View(DL_RADx_msa)
View(new_DL_RADx_msa)
View(new_DL_RADx_msa)
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library(msaWrapper)
library(pROC)
library(glmnet)
library(readxl)
library(dplyr)
load('../../Deep learning radiomics/DL_RDx_data.Rdata')
DL_RADx <- DL_RADx %>% select(starts_with('VSSAE_nzmult_1'), 'ID')
texrad <- read.csv("../../from_Balaji radiomics/Mar2023/LungExosomes_DATA_2023-03-29_0958.csv")
texrad <- texrad[is.na(texrad$exclusions),] ##Remove exluded TexRad
texrad_IDs <- unique(texrad$subject_no)
dl_ID <- unique(DL_RADx$ID)
overlap <- intersect(texrad_IDs, dl_ID)
length(overlap)
DL_RADx <- DL_RADx[DL_RADx$ID %in% overlap,]
#DL_RADx <- DL_RADx[strex::str_first_number(DL_RADx$ID) > 53, ]
DL_RADx <- DL_RADx[strex::str_first_number(DL_RADx$ID) < 422, ]
length(DL_RADx$ID)
save(DL_RADx , file = "DL_Latent_data.Rdata")
load("../Testset_new1.rda")
load("../Testset_new2.rda")
load("../Testset_new3.rda")
load("../Testset_new4.rda")
TestSetList<-list(testSet1,testSet2,testSet3,testSet4)
outcomes <- read.csv("../../from_Thida and Sheena Lim/KCL_LungEDx_Outcomes Apr2023.csv")
GetMergeDataandLabel<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
return (list(mergedData=merged_data, label=CancerDx))
}
mergeAndCreatWrapper<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Performance.Status,
Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
# Create msa wrapper object to use for analysis
mergeddatawrapper_msa <- msaWrapperCreate(data = merged_data,
outcome = CancerDx,
rowsLabelled = T)
print(mergeddatawrapper_msa)
plotOutcome(mergeddatawrapper_msa)
plotDataCorrelations(mergeddatawrapper_msa, method = "kendall")
mergeddatawrapper_msa <- generateOutcomeCorrelations(mergeddatawrapper_msa)
plotOutcomeCorrelations(mergeddatawrapper_msa)
return (mergeddatawrapper_msa)
}
#msa<-mergeAndCreatWrapper(feature_data=DL_RADx,outcomes
#nemasa1<-reduceByCorrelationWithinGroups(msa,method = "kendall", threshold=0.4)
for (i in 1:4){
cat('Cross Validation :',i)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
msa_cv <- readRDS(paste0(data_namecv, "_msa.Rds"))
SPS_model_cv <- buildSPSignature(msa_cv, data_namecv, iterations = 5000)
saveRDS(SPS_model_cv, file = paste0(data_namecv, "_SPS_model.Rds"))
file.rename("SPS_Signature_logfile.txt", paste0(data_namecv, "_SPS_Signature_logfile.txt"))
}
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library(msaWrapper)
library(pROC)
library(glmnet)
library(readxl)
library(dplyr)
load('../../Deep learning radiomics/DL_RDx_data.Rdata')
DL_RADx <- DL_RADx %>% select(starts_with('VSSAE_nzmult_1'), 'ID')
texrad <- read.csv("../../from_Balaji radiomics/Mar2023/LungExosomes_DATA_2023-03-29_0958.csv")
texrad <- texrad[is.na(texrad$exclusions),] ##Remove exluded TexRad
texrad_IDs <- unique(texrad$subject_no)
dl_ID <- unique(DL_RADx$ID)
overlap <- intersect(texrad_IDs, dl_ID)
length(overlap)
DL_RADx <- DL_RADx[DL_RADx$ID %in% overlap,]
#DL_RADx <- DL_RADx[strex::str_first_number(DL_RADx$ID) > 53, ]
DL_RADx <- DL_RADx[strex::str_first_number(DL_RADx$ID) < 422, ]
length(DL_RADx$ID)
save(DL_RADx , file = "DL_Latent_data.Rdata")
load("../Testset_new1.rda")
load("../Testset_new2.rda")
load("../Testset_new3.rda")
load("../Testset_new4.rda")
TestSetList<-list(testSet1,testSet2,testSet3,testSet4)
outcomes <- read.csv("../../from_Thida and Sheena Lim/KCL_LungEDx_Outcomes Apr2023.csv")
GetMergeDataandLabel<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
return (list(mergedData=merged_data, label=CancerDx))
}
mergeAndCreatWrapper<-function(feature_data, outcomedata)
{
# more patients with outcomes than in the data
# merge to get just those with data
merged_data <- merge(feature_data, outcomedata, by = "ID", all.x = T)
# get rid of any without outcome
merged_data <- merged_data[!is.na(merged_data$CancerDx),]
# get the merged outcomes
CancerDx <- merged_data$CancerDx
# get rid of outcome data and stuff we are not interested in
merged_data <- subset(merged_data, select = -c(Date.of.Compilation,
Date.of.Consent,
Performance.Status,
Smoker.Hx,
DoD,
CancerDxClass,
CancerDx,
OS_time..days.,
OS_event))
# Create msa wrapper object to use for analysis
mergeddatawrapper_msa <- msaWrapperCreate(data = merged_data,
outcome = CancerDx,
rowsLabelled = T)
print(mergeddatawrapper_msa)
plotOutcome(mergeddatawrapper_msa)
plotDataCorrelations(mergeddatawrapper_msa, method = "kendall")
mergeddatawrapper_msa <- generateOutcomeCorrelations(mergeddatawrapper_msa)
plotOutcomeCorrelations(mergeddatawrapper_msa)
return (mergeddatawrapper_msa)
}
#msa<-mergeAndCreatWrapper(feature_data=DL_RADx,outcomes
#nemasa1<-reduceByCorrelationWithinGroups(msa,method = "kendall", threshold=0.4)
for (i in 1:4){
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
DL_RADx_test <- DL_RADx[DL_RADx$ID %in% TestSetList[[i]],]
#print(flow_test)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
DL_RADx_msa<-mergeAndCreatWrapper(feature_data=DL_RADx_train,outcomes)
#new_DL_RADx_msa<-reduceByCorrelationWithinGroups(DL_RADx_msa,method = "kendall", threshold=0.6)
saveRDS(DL_RADx_msa, file = paste0(data_namecv, "_msa.Rds"))
}
for (i in 1:4){
cat('Cross Validation :',i)
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
msa_cv <- readRDS(paste0(data_namecv, "_msa.Rds"))
SPS_model_cv <- buildSPSignature(msa_cv, data_namecv, iterations = 5000)
saveRDS(SPS_model_cv, file = paste0(data_namecv, "_SPS_model.Rds"))
file.rename("SPS_Signature_logfile.txt", paste0(data_namecv, "_SPS_Signature_logfile.txt"))
}
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_name <-paste("Sel_DL_RADx",i,sep="_")
SPS_model_cv <- readRDS(paste0(data_name, "_SPS_model.Rds"))
plotSPSignatureBetaSwimmers(SPS_model_cv, show_best_performance_line = F)
plotSPSignatureOClass(SPS_model_cv)
}
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_name <-paste("Sel_DL_RADx",i,sep="_")
SPS_model_cv <- readRDS(paste0(data_name, "_SPS_model.Rds"))
plotSPSignatureBetaSwimmers(SPS_model_cv, show_best_performance_line = F)
plotSPSignatureOClass(SPS_model_cv)
}
traingAUC <- vector(mode="numeric", length=4)
for (i in 1:4){
print(paste0(" Cross  validation: ", i))
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
#SPS_model_cv <- readRDS(paste0(data_namecv, "_SPS_model.Rds"))
DL_RADx_train <- DL_RADx[!(DL_RADx$ID %in% TestSetList[[i]]),]
MergedDataandLaebl <-GetMergeDataandLabel(DL_RADx_train,outcomes)
trainresultscv <-predictSPSignature(MergedDataandLaebl$mergedData, data_namecv, "Reg_SETCV_MAP_L2")
traingAUC[i]<-getSPSignaturePerformance(trainresultscv, MergedDataandLaebl$label)
getSignatures(data_namecv,"Reg_SETCV_MAP_L2")
getNormalisedSignatures(data_namecv,"Reg_SETCV_MAP_L2")
}
setwd("D:/Lung EDx/CrossValidation/AEbest")
library(msaWrapper)
# REMEMBER TO SET THE WORKING FOLDER - THAT'S WHERE THE RESULTS WILL GO
for (i in 1:4){
data_namecv <-paste("Sel_DL_RADx",i,sep="_")
msa <- readRDS(paste0(data_namecv, "_msa.Rds"))
initfile<-paste("Sel_DL_RADx",i,sep="_")
initfile<-paste(initfile,".ini",sep="")
system(paste("SaddlePoint-Signature.exe", initfile))
file.rename("SPS_Signature_logfile.txt", paste0(data_namecv, "_SPS_Signature_logfile.txt"))
}
View(GetMergeDataandLabel)
View(GetMergeDataandLabel)
library(msaWrapper)
knitr::opts_chunk$set(echo = TRUE)
include_range <- c(72:421)
#overlap <- subset(overlap, ID %in% sprintf("EDX%03d", include_range))
outcome <- read.csv("../from_Thida and Sheena Lim/KCL_LungEDx_Outcomes Apr2023.csv")
# remove spaces from ID
outcome$ID <- gsub(" ", "", outcome$ID)
# remove those with no outcome
#ID_with_NA_outcome <- outcome$ID[is.na(outcome$CancerDx)]
outcome <- subset(outcome, !is.na(CancerDx)) # remove the one with no outcome
outcome_IDs <- unique(outcome$ID)
texrad <- read.csv("../from_Balaji radiomics/Mar2023/LungExosomes_DATA_2023-03-29_0958.csv")
texrad <- texrad[is.na(texrad$exclusions),] ##Remove excluded TexRad
#texrad <- subset(texrad, !(subject_no %in% ID_with_NA_outcome))
texrad <- subset(texrad, subject_no %in% sprintf("EDX%03d", include_range))
names(texrad)[names(texrad) == "subject_no"] <- "ID"
texrad_IDs <- unique(texrad$ID)
flow <- read.csv("flow/EDx_FACS_veryFinalTable.csv")
flow$ID <- sub("x", "X", flow$ID)
flow_IDs_all <- flow$ID
#dl <- read.csv("../from_Sam/all_feats_predictive_models_resize_15092022.csv")
load('../Deep learning radiomics/DL_RDx_data.Rdata')
dl_IDs <- unique(DL_RADx$ID)
#overlap <- subset(overlap, ID %in% texrad$subject_no)
#overlap_joined <-merge(texrad, outcome, by.x='subject_no',by.y = 'ID')
#names(overlap_joined)[names(overlap_joined) == "subject_no"] <- "ID"
#overlap <- subset(overlap_joined, select = c(ID,CancerDx))
overlap_all <- intersect(texrad_IDs, dl_IDs)
overlap_all <- intersect(overlap_all, flow_IDs_all)
overlap_all <- intersect(overlap_all, outcome_IDs)
length(overlap_all)
overlap <- outcome[outcome$ID %in% overlap_all, c("ID", "CancerDx")]
sum(overlap$CancerDx)
number_in_test_set = 61
cat("prevalence in whole set ", sum(overlap$CancerDx)/length(overlap$CancerDx), "\n")
test_proportion <- number_in_test_set/length(overlap$CancerDx)
set.seed(2438)
testIndex <- caret::createDataPartition(overlap$CancerDx,
p = test_proportion,
list = F, times = 1)
cat("prevalence in test set ", sum(overlap$CancerDx[testIndex])/length(overlap$CancerDx[testIndex]), "\n")
testSet <- overlap$ID[testIndex]
?caret::createDataPartition
t2 <- testSet
setwd("D:/Lung EDx/Final_Experiments_183")
load("D:/Lung EDx/Final_Experiments_183/Testset.rda")
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library(msaWrapper)
library(pROC)
library(glmnet)
new_flow <- read.csv("EDx_FACS_veryFinalTable.csv")
dim(new_flow)
flow <- new_flow[, -grep("sample", names(new_flow))]
flow <- new_flow[, -grep("DUMP", names(new_flow))]
names(new_flow)
grep("sample", names(new_flow))
flow <- subset(flow, select = -c(date.of.FACS,group))
flow <- flow[, !grepl("^X_", colnames(flow))]
flow <- flow[, !sapply(flow, function(x) all(x == x[1]))]
cols_to_impute <- grep(".M$", names(flow), value = TRUE)
flow[cols_to_impute]
is.na(flow[cols_to_impute])
head(flow)
flow$ID <- sub("x", "X", flow$ID)
include_range <- c(72:421)
