# raw training prediction
train_ci_i[i] = randomForestSRC::get.cindex(rf$yvar[,1], rf$yvar[,2], -rf$predicted)
# OOB prediction
OOB_ci_i[i] = randomForestSRC::get.cindex(rf$yvar[,1], rf$yvar[,2], -rf$predicted.oob)
if(byOOB == FALSE) {
# Validation prediction instead
pred <- predict(rf, newdata = valid_data, na.action = "na.impute", outcome = "test")
valid_ci_i[i] = randomForestSRC::get.cindex(pred$yvar[,1], pred$yvar[,2], -pred$predicted.oob)
}
}
close(ProgressBar)
# get stats
train_c_index <- c(train_c_index, mean(train_ci_i))
OOB_c_index <- c(OOB_c_index, mean(OOB_ci_i))
valid_c_index <- c(valid_c_index, mean(valid_ci_i))
train_ci_sd <- c(train_ci_sd, sd(train_ci_i))
OOB_ci_sd <- c(OOB_ci_sd, sd(OOB_ci_i))
valid_ci_sd <- c(valid_ci_sd, sd(valid_ci_i))
active_covars <- c(active_covars, current_p)
# Choose a covar to remove
score <- importance
scores <- apply(score, 1, sum)
active_covar_scores[[n_repeat]] <- scores
scores_names <- names(current_x)[order(scores)]
# reduce the covariates by one!!!!!!!!!!!!!
current_x <- current_x[,scores_names[2:current_p]]
current_data <- cbind(current_x, outcome)
n_repeat <- n_repeat+1
# if x has been reduced to a vector, we are on the last covariate
if(is.vector(current_x)){
#print(scores_names[2])  # the one left at the end
active_covar_names[[n_repeat]] <- scores_names[2]
active_covar_scores[[n_repeat]] <- NA
break
}
}
# choose optimal model
if(byOOB == TRUE){
# Choose max of OOB performance
max_i <- which.max(OOB_c_index)
}else{
# Choose max of validation performance
max_i <- which.max(valid_c_index)
}
optimal_p <- active_covars[max_i]
optimal_names <- active_covar_names[[max_i]]
#x <- data[, -c(p-1,p)]
x <- msa$data
optimal_x <- subset(x, select = optimal_names)
optimal_data <- cbind(optimal_x, outcome)
print(paste("Optimal p=", optimal_p))
# Do iterations to find a good rf with optimal p
best_perf = 0
best_rf = NULL
for (i in 1:iterations){
setTxtProgressBar(ProgressBar, i)
# train RF
rf <- randomForestSRC::rfsrc(formula,
data = optimal_data,
na.action = "na.impute",
importance = TRUE,
proximity = TRUE)
# OOB prediction
perf = randomForestSRC::get.cindex(rf$yvar[,1], rf$yvar[,2], -rf$predicted.oob)
if(perf > best_perf){
best_perf = perf
best_rf <- rf
}
}
performance <- data.frame(active_covars,
train_c_index, train_ci_sd,
OOB_c_index, OOB_ci_sd,
valid_c_index, valid_ci_sd)
# return this object
structure(list(iterations, byOOB,
performance,
active_covar_names,
active_covar_scores,
optimal_p, optimal_names,
best_perf,
best_rf),
.Names = c("iterations", "byOOB",
"performance",
"active_covar_names", "active_covar_scores",
"optimal_p", "Optimal_covars",
"best_c_index",
"trained_random_forest"),
class = "msaWrapperRandomSurvivalForest")
}
rf_oc <- buildRandomForest2(msa_oc, iterations = 4)
library(msaWrapper)
debugonce(buildRandomForest)
rf_oc <- buildRandomForest(msa_oc, iterations = 4)
train_data$outcome
library(msaWrapper)
rf_oc <- buildRandomForest(msa_oc, iterations = 4)
library(msaWrapper)
rf_oc <- buildRandomForest(msa_oc, iterations = 2)
library(msaWrapper)
rf_oc <- buildRandomForest(msa_oc, iterations = 2)
library(msaWrapper)
rf_oc <- buildRandomForest(msa_oc, iterations = 2)
View(rf_oc)
View(rf_oc[["performance"]])
rf_tte <- buildRandomForest(msa_tte, iterations = 2)
View(rf_tte)
msa_oc_red <- reduceByCorrelationWithinGroups(msa_oc)
debugonce(buildRandomForest)
rf_oc <- buildRandomForest(msa_oc_red, iterations = 2)
rf$predicted
rf$predicted.oob
train_x
train_data$outcome
rf$predicted
rf$predicted[,1]
rf$predicted[,2]
class(rf$predicted)
names(rf$predicted)
colnames(rf$predicted)
colnames(rf$predicted)[max(rf$predicted)]
colnames(rf$predicted)[max.col(rf$predicted)]
View(rf)
rf$class
train_data$outcome
rf$class.oob
library(msaWrapper)
rf_oc <- buildRandomForest(msa_oc_red, iterations = 2)
View(rf_oc)
View(rf_tte)
library(msaWrapper)
rf_tte <- buildRandomForest(msa_tte, iterations = 2)
library(msaWrapper)
library(msaWrapper)
plotRandomForestPerformance(rf_oc)
plotRandomForestPerformance(rf_tte)
View(rf_tte)
library(msaWrapper)
plotRandomForestPerformance(rf_oc)
library(msaWrapper)
plotRandomForestPerformance(rf_oc)
plotRandomForestPerformance(rf_oc)
plotRandomForestPerformance(rf_tte)
library(msaWrapper)
plotRandomForestPerformance(rf_oc)
plotRandomForestPerformance(rf_tte)
library(msaWrapper)
plotRandomForestPerformance(rf_oc)
plotRandomForestPerformance(rf_tte)
library(usethis)
use_package("ini")
tempfile(fileext = '.ini')
getwd()
sink(file = "grot.ini")
cat("; This line is a comment\n")
cat("# This one too!\n")
cat("[    Hello World]\n")
cat("Foo = Bar          \n")
cat("Foo1 = Bar=345 \n")
sink()
nlevels(msa$outcome)
msa$outcome
nlevels(msa_oc$outcome)
nlevels(msa$outcome$event)
msa$outcome$event
nlevels(as.factor(msa$outcome$event))
library(msaWrapper)
use_package("stringr")
library(msaWrapper)
use_r("plotSPSignature")
use_package("strex")
help("stopifnot")
use_package("tidyr")
library(msaWrapper)
usethis::use_r("plotRandomForest")
library(msaWrapper)
load("E:\Signature Generation\RF_tests\simdata_2_100_1/msaWrapperRandomSurvivalForest.Rdata")
load("E:/Signature Generation/RF_tests/simdata_2_100_1/msaWrapperRandomSurvivalForest.Rdata")
View(RSF)
View(RSF)
covar.names <- RSF$active_covar_names[[1]]
betas <- as.data.frame(do.call(rbind, RSF$active_covar_scores))
betas <- data.frame()
betas[1,] <- RSF$active_covar_scores[[1]]
View(betas)
betas <- matrix(nrow = length(RSF$active_covar_scores), ncol = length(RSF$active_covar_scores[[1]]))
betas[1,] <- RSF$active_covar_scores[[1]]
View(betas)
betas[2,] <- RSF$active_covar_scores[[2]]
betas[2,] <- c(RSF$active_covar_scores[[2]], rep(0, length(RSF$active_covar_scores[[1]])-length(RSF$active_covar_scores[[2]]))
)
View(betas)
View(RSF)
length(RSF$active_covar_names)
# Form a data frame with cols: Covar_name Score Number_Active
data_long$Beta <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
p=1
c <- RSF$active_covar_names[[p]]
s <- RSF$active_covar_scores[[p]]
for(p in 1:length(RSF$active_covar_names)){
c <- RSF$active_covar_names[[p]]
s <- RSF$active_covar_scores[[p]]
for(q in 1:length(c)){
data_long <- rbind(data_long, c(c[q], s[q], length(c)))
}
}
View(data_long)
text.size <- 256 / length(covar.names)   # by trial and error, this is a good height, if names not too long.
largest.Score <- max(2*critical.value, max(abs(data_long$Score)))
# Set a critical importance value, for colour scale
critical.value <- 0.1
# Find the optimal points
optimum_performance <- RSF$optimal_p
largest.Score <- max(2*critical.value, max(abs(data_long$Score)))
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
data_long <- rbind(data_long, c(c[q], s[q], length(c)))
View(data_long)
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
for(p in 1:length(RSF$active_covar_names)){
c <- RSF$active_covar_names[[p]]
s <- RSF$active_covar_scores[[p]]
for(q in 1:length(c)){
data_long <- rbind(data_long, c(c[q], s[q], length(c)))
}
}
names(data_long) <- c("Covariate", "Score", "Active")
largest.Score <- max(2*critical.value, max(abs(data_long$Score)))
summary(data_long)
for(p in 1:length(RSF$active_covar_names)){
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
for(q in 1:length(c)){
data_long <- rbind(data_long, c(c[q], s[q], length(c)))
}
}
names(data_long) <- c("Covariate", "Score", "Active")
text.size <- 256 / length(covar.names)   # by trial and error, this is a good height, if names not too long.
largest.Score <- max(2*critical.value, max(abs(data_long$Score)))
summary(data_long)
s
data_long$Score
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
for(p in 1:length(RSF$active_covar_names)){
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
for(q in 1:length(c)){
data_long <- rbind(data_long, c(c[q], s[q], length(c)))
}
}
names(data_long) <- c("Covariate", "Score", "Active")
text.size <- 256 / length(covar.names)   # by trial and error, this is a good height, if names not too long.
largest.Score <- max(2*critical.value, max(abs(data_long$Score)))
p=20
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
q=1
c(c[q], s[q], length(c))
s[q]
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
for(p in 1:length(RSF$active_covar_names)){
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
for(q in 1:length(c)){
data_long <- rbind(data_long, list(c[q], s[q], length(c)))
}
}
View(data_long)
names(data_long) <- c("Covariate", "Score", "Active")
text.size <- 256 / length(covar.names)   # by trial and error, this is a good height, if names not too long.
largest.Score <- max(2*critical.value, max(abs(data_long$Score)))
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_overfitting, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
library(ggplot2)
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_overfitting, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
print(ggp)
title <- "yes"
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
print(ggp)
largest.Score <- max(abs(data_long$Score))
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("light blue", "#CCAAAA", "red"),
limits = c(0, largest.Score),
values = scales::rescale(c(0,  1/largest.Score), c(0, 1)),
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
print(ggp)
largest.Score <- max(abs(data_long$Score))
largest.Score <- max(data_long$Score)
View(data_long)
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("red"),
limits = c(0, largest.Score),
values = scales::rescale(c(0,  1/largest.Score), c(0, 1)),
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
print(ggp)
largest.Score <- max(data_long$Score)
summary(data_long)
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
print(ggp)
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
# go through list, except last one which is a special case
for(p in 1:(length(RSF$active_covar_names)-1)){
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
for(q in 1:length(c)){
data_long <- rbind(data_long, list(c[q], s[q], length(c)))
}
}
# last one, just the last covariate
data_long <- rbind(data_long, list(RSF$active_covar_names[[length(RSF$active_covar_names)]][1], 1.0, 1))
names(data_long) <- c("Covariate", "Score", "Active")
text.size <- 256 / length(covar.names)   # by trial and error, this is a good height, if names not too long.
largest.Score <- max(abs(data_long$Score))
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
print(ggp)
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric())
# go through list, except last one which is a special case
for(p in 1:(length(RSF$active_covar_names)-1)){
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
for(q in 1:length(c)){
data_long <- rbind(data_long, list(c[q], s[q], length(c)))
}
}
largest.Score <- max(abs(data_long$Score))
# last one, just the last covariate
data_long <- rbind(data_long, list(RSF$active_covar_names[[length(RSF$active_covar_names)]][1], largest.Score, 1))
names(data_long) <- c("Covariate", "Score", "Active")
ggp <- ggplot(data_long, aes(y = Covariate, x = Active, fill = Score)) +
theme_light() +
theme(axis.text.y = element_text(size = text.size)) +
geom_tile() +
scale_fill_gradientn(colours = c("dark green", "#AACCAA", "light blue", "#CCAAAA", "red"),
limits = c(-largest.Score, largest.Score),
values = scales::rescale(c(-1/largest.Score, -critical.value, 0, critical.value, 1/largest.Score), c(0, 1)),    # scale with extreme colours at beta=1.0
na.value = "transparent") +
geom_vline(xintercept = optimum_performance, linetype="dashed") +
ggtitle(title) +
scale_y_discrete(limits = rev)
ggp <- ggp + geom_vline(xintercept = optimum_performance, linetype="dashed")
print(ggp)
# Form a data frame with cols: Covar_name Score Number_Active
data_long <- data.frame(Covariate = character(), Score = numeric(), Active = numeric()) # set this up here, but it gets overwritten!
View(data_long)
# go through list, except last one which is a special case
for(p in 1:(length(RSF$active_covar_names)-1)){
c <- RSF$active_covar_names[[p]]
s <- as.numeric(RSF$active_covar_scores[[p]])
for(q in 1:length(c)){
data_long <- rbind(data_long, list(c[q], s[q], length(c)))
}
}
largest.Score <- max(abs(data_long$Score))
# last one, just the last covariate
data_long <- rbind(data_long, list(RSF$active_covar_names[[length(RSF$active_covar_names)]][1], largest.Score, 1))
names(data_long) <- c("Covariate", "Score", "Active")
text.size <- 256 / length(covar.names)   # by trial and error, this is a good height, if names not too long.
library(msaWrapper)
library(msaWrapper)
library(msaWrapper)
randomForestSRC::rfsrc
library(usethis)
use_r("plotCoxElasticNet")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(msaWrapper)
library(ggplot2)
data("tte_data")
names(tte_data)
groups <- c(1, rep(2,2), rep(3,6), 1, rep(2,3), rep(4,26), 5, 6, 6, rep(7, 3),
rep(4,26), 6, 6, 5, rep(7, 3))
groupNames <- c("Drug", "Clinical", "Site", "immune", "FRET", "miR", "missing")
length(groups)
msa <- msaWrapperCreate(tte_data[,1:77], tte_data[,78:79],
group = groups, groupLabels = groupNames)
print(msa)
reduced_msa <- reduceByCorrelationWithinGroups(msa, threshold = 0.6)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
CEN <- buildCoxElasticNet(reduced_msa, iterations = 10)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
CEN <- buildCoxElasticNet(reduced_msa, iterations = 10)
plotCoxElasticNetPerformance(CEN)
plotCoxElasticNetCoefs(CEN)
View(CEN)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
CEN <- buildCoxElasticNet(reduced_msa, iterations = 10)
plotCoxElasticNetCoefs(CEN)
View(CEN)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
plotCoxElasticNetPerformance(CEN)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
plotCoxElasticNetPerformance(CEN)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
plotCoxElasticNetPerformance(CEN)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
plotCoxElasticNetPerformance(CEN)
print(CEN$optimal_covars)
print(CEN$optimal_coefs)
CEN$strict_Predicted_risk
library(msaWrapper)
library(msaWrapper)
print(plot(cen$glmnet_model, label = T))
print(plot(CEN$glmnet_model, label = T))
library(msaWrapper)
library(ggplot2)
plotCoxElasticNetCoefs(CEN)
CEN <- buildCoxElasticNet(reduced_msa, iterations = 10)
plotCoxElasticNetCoefs(CEN)
library(msaWrapper)
library(msaWrapper)
library(ggplot2)
plotCoxElasticNetCoefs(CEN)
plotCoxElasticNetCoefs(CEN)
CEN <- buildCoxElasticNet(reduced_msa, iterations = 10)
plotCoxElasticNetCoefs(CEN)
plotCoxElasticNetCoefs(CEN)
plotCoxElasticNetPerformance(CEN)
plotCoxElasticNetCoefs(CEN)
